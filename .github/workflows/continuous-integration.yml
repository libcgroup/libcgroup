# SPDX-License-Identifier: LGPL-2.1-only
#
# Continuous Integration Workflow for libcgroup
#
# Copyright (c) 2020-2021 Oracle and/or its affiliates.
# Author: Tom Hromatka <tom.hromatka@oracle.com>
#

name: Continuous Integration
on: ["push", "pull_request"]

jobs:
  # Doc: https://github.com/redhat-plumbers-in-action/differential-shellcheck#usage
  differential-shellcheck:
    name: Differential ShellCheck
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Differential ShellCheck
        uses: redhat-plumbers-in-action/differential-shellcheck@v5
        with:
          severity: warning
          token: ${{ secrets.GITHUB_TOKEN }}

  flake8-lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Install flake8 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python3-flake8-quotes
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      - name: flake8 Lint
        uses: reviewdog/action-flake8@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  checkpatch:
    name: Checkpatch Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: 'Calculate PR commits + 1'
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
      - name: Run checkpatch review
        uses: webispy/checkpatch-action@v9
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  doxygen:
    name: Doxygen
    # Only run Doxygen against the main branch
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - uses: mattnotmitt/doxygen-action@v1
      with:
        working-directory: "./"
        doxyfile-path: "./doc/Doxygen"
    - name: Move the Doxygen Files
      run: sudo mv ./html doc/
    - name: Deploy Doxygen
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc/html
        publish_branch: doxygen/${{ github.ref_name }}

  build-with-clang:
    name: Build with Clang
    runs-on: ubuntu-latest
    env:
      CC: clang
      CXX: clang++
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Install dependencies
      run: |
        while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do sleep 3; done
        sudo apt-get update
        sudo apt-get install libpam-dev python3-pip python3-dev cmake bison flex byacc g++ autoconf automake libtool libsystemd-dev clang -y
    - name: Install cython
      run: sudo pip install cython
    - name: Bootstrap
      run: ./bootstrap.sh
    - name: Reconfigure libcgroup with unit tests enabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-opaque-hierarchy="name=systemd" --enable-python --enable-unittests
    - name: Build libcgroup
      run: make
    - name: Run unit tests
      run: |
        pushd tests/gunit
        make check
        popd

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Reconfigure libcgroup with unit tests enabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-code-coverage --enable-opaque-hierarchy="name=systemd" --enable-python --enable-unittests
    - name: Run unit tests
      run: |
        pushd tests/gunit
        make check
        popd
    - name: Collate code coverage results
      uses: ./.github/actions/code-coverage
    - name: Upload code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.total
        flag-name: "Unit Tests"
        parallel: True
    - name: Archive code coverage results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Unit Test Code Coverage
        path: lcov.*

  container-tests:
    name: Container Tests
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Run container tests
      run: |
        pushd tests/ftests
        ./ftests-container.sh
        popd
    - name: Collate code coverage results
      uses: ./.github/actions/code-coverage
    - name: Upload code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.total
        flag-name: "Container Tests"
        parallel: True
    - name: Archive code coverage results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Container Tests Code Coverage
        path: lcov.*

  nocontainer-tests:
    name: No Container Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Run container tests
      run: |
        pushd tests/ftests
        ./ftests-nocontainer.sh
        popd
    - name: Collate code coverage results
      uses: ./.github/actions/code-coverage
    - name: Upload code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.total
        flag-name: "No Container Tests"
        parallel: True
    - name: Archive code coverage results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: No Container Tests Code Coverage
        path: lcov.*

  sudo-tests:
    name: Sudo Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Run sudo tests
      run: |
        pushd tests/ftests
        ./ftests-sudo.sh
        popd
    - name: Collate code coverage results
      uses: ./.github/actions/code-coverage
    - name: Upload code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.total
        flag-name: "Sudo Tests"
        parallel: True
    - name: Archive code coverage results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Sudo Tests Code Coverage
        path: lcov.*

  distcheckv2:
    name: Cgroup v2 Dist Check
    runs-on: ubuntu-22.04

    steps:
    - name: Install container dependencies
      run: |
        sudo apt-get update
        sudo apt-get install lxc lxd-installer
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Run make distcheck
      run: make distcheck
    - name: Display test logs
      if: ${{ failure() }}
      run: |
        cat libcgroup-*/_build/sub/tests/ftests/ftests-wrapper.sh.log

  build-options:
    name: Build with various options enabled/disabled
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Initialize the directory
      uses: ./.github/actions/setup-libcgroup
    - name: Reconfigure libcgroup with systemd disabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-code-coverage --enable-opaque-hierarchy="name=systemd" --enable-python --enable-systemd=no
    - name: Build the library
      run: make
    - name: Reconfigure libcgroup with samples enabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-code-coverage --enable-opaque-hierarchy="name=systemd" --enable-python --enable-samples
    - name: Build the library
      run: make
    - name: Reconfigure libcgroup with systemd disabled and samples enabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-code-coverage --enable-opaque-hierarchy="name=systemd" --enable-python --enable-systemd=no --enable-samples
    - name: Build the library
      run: make

  nosystemd:
    name: Build without systemd enabled
    runs-on: ubuntu-22.04

    steps:
    - name: Update the system
      run: |
        sudo apt-get update
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Install dependencies
      run: |
        sudo apt-get install libpam-dev lcov python3-pip python3-dev cmake bison flex byacc g++ autoconf automake libtool lcov -y
    - name: Install cython
      run: sudo pip install cython
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
        pushd googletest
        git checkout v1.12.0
        mkdir -p build
        cd build
        cmake .. -DBUILD_GMOCK=OFF
        make
        popd
    - name: Automake
      run: |
        test -d m4 || mkdir m4
        autoreconf -fi
        rm -fr autom4te.cache
    - name: Run configure with systemd disabled
      run: CFLAGS="$CFLAGS -Werror" ./configure --sysconfdir=/etc --localstatedir=/var --enable-code-coverage --enable-opaque-hierarchy="name=systemd" --enable-python --enable-systemd=no --enable-samples
    - name: Build the library
      run: make
    - run: lcov -i -d . -c -o lcov.base
      shell: bash
    - name: Run the unit tests
      run: |
        pushd tests/gunit
        make check
        popd
    - name: Run the functional tests
      run: |
        pushd src/python/build/lib.*
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        popd
        pushd tests/ftests
        ./ftests.py -l 10 -L ftests.log --skip 80
        ./ftests.py -l 10 -L ftests-nocontainer.log --skip 38,72,73,77,80,81,82 \
            --no-container
        popd
    - name: Archive test logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: No systemd test logs
        path: ./*.log
    - name: Collate code coverage results
      uses: ./.github/actions/code-coverage
    - name: Upload code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./lcov.total
        flag-name: "No systemd Functional Tests"
        parallel: True
    - name: Archive code coverage results
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: No systemd Code Coverage
        path: lcov.*

  finalize:
    name: Finalize the test run
    if: ${{ always() }}
    needs: [unit-tests, container-tests, nocontainer-tests, sudo-tests, nosystemd]
    runs-on: ubuntu-latest
    steps:
    - name: Finalize code coverage results
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: True
