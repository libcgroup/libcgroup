1.  Update version in configure.ac
    a.  AC_INIT([libcgroup],[0.XX])
    b.  Add an .rcY to the end, e.g. 0.XX.rcY
    c.  AC_SUBST(LIBRARY_VERSION_MAJOR, 0)
        AC_SUBST(LIBRARY_VERSION_MINOR, XX)
        AC_SUBST(LIBRARY_VERSION_RELEASE, rcY)
2.  Build
    a.  Run ./bootstrap.sh
    b.  Run ./configure --enable-opaque-hierarchy="name=systemd"
    c.  Run make check
    d.  Run make dist
3.  Tag the Release
    a.  git tag -s -a -m "v0.XX.rcY" v0.XX.rcY
4.  Push to github
    a.  git push origin v0.XX.rcY
    b.  Generate a checksum for the *.tar.gz and *.tar.bz2 and ...
        sha256sum <tarball> > libcgroup-X.Y.Z.tar.gz.SHA256SUM
    c.  Sign the tar files
        gpg --armor --detach-sign libcgroup-X.Y.Z.tar.gz
        gpg --armor --detach-sign libcgroup-X.Y.Z.tar.bz2
    d.  Sign the SHA256 files
        gpg --clearsign libcgroup-X.Y.Z.tar.gz.SHA256SUM
        gpg --clearsign libcgroup-X.Y.Z.tar.bz2.SHA256SUM
    e.  Upload the zips, checksums, and signing files to the github
        release
    f.  Email libcg-devel about the new release w/ the changelog
        git shortlog v0.XX.rc(Y-1)..v0.XX.rcY
5.  Verify continuous integration passes
    a.  Verify TravisCI, code coverage, etc. all pass
    b.  If the CI checks fail, fix it, and go back to step #1
6.  Fix issues identified as critical for current rc(Y+1)
    a.  If any issues fixed, update the rcY number and go to step #1
    b.  If no issues, go to step #7
7.  Release Notes
8.  Do steps #1 through #5 (except step #1b)
